{"version":3,"sources":["img/rocket.svg","img/sensor1.png","img/sensor2.png","img/sensor3.png","components/Button.js","components/Navbar.js","components/Main.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","_ref","children","_ref$onClick","onClick","react_default","a","createElement","className","Navbar","react_router_dom","to","src","logo","alt","src_components_Button","window","open","Modal","setAppElement","Main","_useState","useState","_useState2","Object","slicedToArray","modalOpen","setModalOpen","Fragment","lib_default","isOpen","onRequestClose","contentLabel","overlayClassName","action","method","type","name","rows","sensor1","sensor2","sensor3","NotFound","App","src_components_Navbar","react_router","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8288407b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rocket.fe9f5eed.svg\";","module.exports = __webpack_public_path__ + \"static/media/sensor1.cc5471ab.png\";","module.exports = __webpack_public_path__ + \"static/media/sensor2.b2b95891.png\";","module.exports = __webpack_public_path__ + \"static/media/sensor3.1abc3357.png\";","import React from 'react';\r\nimport './Button.scss';\r\n\r\nconst Button = ({ children, onClick = () => {} }) => {\r\n    return (\r\n        <button className=\"button\" onClick={onClick}>\r\n            <div className=\"buttonChildren\">{children}</div>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.scss';\r\nimport logo from '../img/rocket.svg';\r\nimport Button from './Button';\r\n\r\nconst buttonClick = () => {\r\n  window.open(\"https://angel.co\", \"_blank\");\r\n}\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"left\">\r\n        <Link to=\"/\" className=\"logoLink\">\r\n          <img src={logo} className=\"logo\" alt=\"rocket icon\" />\r\n          <span className=\"voyage\">voyage</span><span className=\"labs\">labs</span>\r\n        </Link>\r\n      </div>\r\n      <div className=\"right\">\r\n        <Button onClick={() => buttonClick()}>Join Our Voyage</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nimport './Main.scss';\r\nimport Button from './Button';\r\n\r\nimport sensor1 from '../img/sensor1.png';\r\nimport sensor2 from '../img/sensor2.png';\r\nimport sensor3 from '../img/sensor3.png';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst Main = () => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  const buttonClick = () => {\r\n    window.open(\"https://angel.co/company/voyage-labs\", \"_blank\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        isOpen={modalOpen}\r\n        onRequestClose={() => setModalOpen(false)}\r\n        contentLabel=\"Contact Modal\"\r\n        className=\"contactModal\"\r\n        overlayClassName=\"modalOverlay\"\r\n      >\r\n        <div className=\"contactHeader\">Questions? Reach out to us!</div>\r\n        <form action=\"https://formspree.io/carrie@medella.ca\" method=\"POST\">\r\n\r\n          <div className=\"formTitle\">Name</div>\r\n          <input className=\"inputField\" type=\"text\" name=\"Name\"/>\r\n\r\n          <div className=\"formTitle\">Email</div>\r\n          <input className=\"inputField\" type=\"text\" name=\"_replyto\"/>\r\n\r\n          <div className=\"formTitle\">Subject</div>\r\n          <input className=\"inputField\" name=\"Subject\"/>\r\n\r\n          <div className=\"formTitle\">Message</div>\r\n          <textarea className=\"textarea\" rows=\"5\" name=\"Message\"/>\r\n\r\n          <Button type=\"submit\">Send</Button>\r\n        </form>\r\n      </Modal>\r\n      <div className=\"main\">\r\n        <div className=\"left\">\r\n          <h1 className=\"title\">Weâ€™re finding a better way </h1>\r\n          <div className=\"bodytext\">\r\n          Voyage Labs is building best-in-class sensors to monitor small molecules, lipids, \r\n          proteins and drugs. Learn more about how our sensor platform works, \r\n          and how it can help you build a better detection system.\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <div className=\"contact\">\r\n            <Button onClick={() => setModalOpen(true)}>Contact Us</Button>\r\n            </div>\r\n            <div className=\"join\">\r\n            <Button onClick={() => buttonClick()}>Join Our Voyage</Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"right\">\r\n          <img src={sensor1} className=\"sensor1\" alt=\"Sensor layer 1\" />\r\n          <img src={sensor2} className=\"sensor2\" alt=\"Sensor layer 2\" />\r\n          <img src={sensor3} className=\"sensor3\" alt=\"Sensor layer 3\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './NotFound.scss';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"notfound\">\r\n      Oops, this page doesn't exist!\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport './App.scss';\r\n\r\nimport Navbar from './components/Navbar';\r\nimport Main from './components/Main';\r\nimport NotFound from './components/NotFound';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <BrowserRouter>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Main} />\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n        {/* <div className=\"footer\">\r\n          <a href=\"http://www.facebook.com\" target=\"_blank\"><img src={fb} className=\"icon\"/></a>\r\n          <a href=\"http://www.twitter.com\" target=\"_blank\"><img src={twitter} className=\"icon\"/></a>\r\n          <a href=\"http://www.youtube.com\" target=\"_blank\"><img src='path_to_your_image' className=\"icon\"/></a>\r\n         </div>\r\n         */}\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}